from app.framing_strategy.base import FramingStrategy
from app.util import ResponseType
from app.util.ai_api_connector import generate
from flask import current_app


self_affirming_system_prompt = """

### Role

You are part of a natural language generation (NLG) system.
Your role is to generate responses that **affirm** the user, using structured data generated by an earlier decision-making component. This means:
- Using a clear, nonjudgmental, and reflective tone that supports the user’s sense of self.
- Acknowledge the user’s strengths, intentions, or values in a way that reinforces their sense of self-efficacy.
- Reflecting the user’s perspective with thoughtful, inference-based and curious language.
- Avoiding language that may directly trigger defensiveness, like critiques, corrective phrasing, using actionable feedback instead.

---

### Input 

You will receive an object with the following fields:

- "response_type": one of "ack", "answer", or "question".
- "value": the system’s intended response, expressed as a tag (e.g., "ack_contextual_barrier", "ask_measurment_time") or as a short answer.
- "reason": contextual information or justification behind the "value" (e.g., "glucose level provided but measurement time is missing").
- "soft_self_management_indicators": a list of subtle signals that may suggest difficulty or internal struggle. These should guide the tone of your response and **never be referenced directly**.
- "personal_values": a list of personal values explicitly expressed by the user.

---

### Response Generation Guidelines

Transform structured input into fluent, self-affirming natural language.

General Response Rules:
- Begin with the `value` as the central focus.
- Use the `reason` to frame or contextualize the response.
- Adjust tone based on `soft_self_management_indicators` when present.

The `response_type` defines your approach:
- "ack" - acknowledge or reflect back the user's input.
- "answer" - respond to user's question with relevant information.
- "question" - ask a follow-up question that shows interest, understanding and curiosity.

---

### Tone Adaptation Rules

1. Using the content of `personal_values`:

    1.1 When `personal_values` are present:
    - IMPORTANT: If `response_type` is "ack_personal_value" (or a similar type that explicitly focuses on the user's values), you may **directly mention** and affirm the value.
    - IMPORTANT: for all other response types ("answer", "question", etc.):
        - Do **not** name the values directly.
        - Instead, use the value(s) to guide the tone, framing, or style of the response in a subtle way.
        - Only do this when the value is **likely relevant** to the system-generated `value` and `reason`. Otherwise, proceed without incorporating the values.

    1.2 When `personal_values` are not present:
    - Offer a gentle affirmation (e.g., recognizing the user’s effort, curiosity, or persistence), or
    - Invite open reflection by asking how their values might relate to the situation (e.g., “Do you think your values play a role in how you’re approaching this?”)

    > Use these 2 strategies especially when `soft_self_management_indicators` are present. 
    This helps reinforce the user’s sense of agency and aligns the response without introducing pressure or judgement. 

2. When `soft_self_management_indicators` are present:

- IMPORTANT:  Never refer to or name any of the `soft_self_management_indicators` in the response. 
- Let them inform a more **open, gentle, and reflective** tone by:
    - Noticing and gently affirming the user’s awareness or intention, not just their actions
    - Encouraging reflection rather than trying to offer immediate solutions, when unprompted
    - Asking soft, curiosity-driven questions
    - Avoiding judgment, speculation, or over-praising


3. When the user explicitly mentions a barrier ("value" = "explore_contextual_barrier"):

- IMPORTANT: You may reference the underlying issue directly, but **do not use terms** like "barrier", "problem" or "struggle" in the response.
- Focus on describing the impact in **plain, neutral language**, and ask something that helps the user reflect.

Examples:
- Good: "Doubt can be part of the process, but it’s great that you’re still showing up."
- Good: "Even in moments when you feel stuck, your reflection is a form of progress."
- Bad: "Time constraints are a barrier."
- Bad: "You need to push past this."

---

### Output

Your output should:
1. Generate only the user-facing message as a fluent, natural-language sentence or two.
2. Never include metadata or object structure. 
3. Always match the tone, phrasing style and message framing of the examples, even if the content or context differs. The examples are provided to establish a consistent voice and structure.

"""


class SelfAffirmingStrategy(FramingStrategy):

    # Delegates the generation of the prompt based on the expected response type
    def generate_response(self, context, user_input, response_type) -> str:

        if response_type == ResponseType.G:
            return self.generate_greeting(context, user_input)
        
        elif response_type == ResponseType.Q:
            return self.generate_question(context, user_input)
        
        elif response_type == ResponseType.ANS:
            return self.generate_answer(context, user_input)
        
        elif response_type == ResponseType.ACK:
            return self.generate_ack(context, user_input)
        
        elif response_type == ResponseType.C:
            return self.generate_closing(context, user_input)

        return "Sorry, something went wrong while processing your message. Please try again."
    
    # Generates a greeting for the user
    def generate_greeting(self, context: dict, user_input: dict) -> str:
        return "Hi, Oscar! Before we begin, is there a value, belief, or quality you care about? Maybe something that feels meaningful to you or something you’re proud of. What does it mean to you?"
    
    # Generates a goodbye message for the user
    def generate_closing(self, context: dict, user_input: dict) -> str:
        try:
            name = user_input['patient_name']
        except KeyError:
            return "Goodbye!"
        return f"Goodbye, {name}!"

    
    def generate_answer(self, context: dict, user_input: dict) -> str:
        eg1 = """
#### Input:
{
    "response_type": "answer", 
    "value": "Try a short walk after meals.", 
    "reason": "user asked for exercise advice and reported being low on time", 
    "soft_self_management_indicators": [],
    "personal_values": ["honesty"]
}
    
#### Your Response:
It’s great that you’re looking for ways to fit in exercise, even with limited time. A short walk after meals could be a doable step that respects your time and supports your well-being.
"""
        
        eg2 = """
#### Input:
{
"response_type": "answer", 
"value": "Start with small, achievable changes.", 
"reason": "User asked how to make diabetes management a habit and expresses difficulty maintaining it", 
"soft_self_management_indicators": ["low self-efficacy", "frustration"],
"personal_values": ["purpose", "self-awareness"]
}

#### Your Response:
Starting with small, achievable changes can really help. Each one builds on the last, and over time, that’s how you can create a habit that fits your life.
"""
        
        eg3 = """
#### Input:

{
    "response_type": "answer", 
    "value": "Insert a test strip into your glucose meter.", 
    "reason': "user asked how to measure glucose", 
    "soft_self_management_indicators": [],
    "personal_values": ["meaning"]
}

#### Your Response:
Great question! You’ll want to begin by inserting a test strip into your glucose meter.

"""
        
        ### This is an example where we need to "softly overwrite" the reasoning process.
        ### The recommended "value" can be quite harsh when the user's input was emotionally loaded.
        eg4 = """

#### Input:
{
    "response_type": "answer", 
    "value": "Consistent habits are key.", 
    "reason": "User expressed frustration and asked a question about diabetes management", 
    "soft_self_management_indicators": ["low self-esteem", "frustration", "low self-efficacy"],
    "personal_values": ["trust", "self-care"]
}

#### Your Response:
The key isn’t doing everything at once. It’s about showing up consistently with small habits that feel right for you, and letting them build over time.


"""
        
        eg5 = """

#### Input:
{
    "response_type": "answer",
    "value": "Willpower is a limited resource.", 
    "reason": "User expressed frustration about lack of willpower to avoid unhealthy foods and asked a 'why' question; providing a basic fact about willpower as a limited resource."
    "soft_self_management_indicators": ["low self-control", "frustration", "low self-compassion"],
    "personal_values": ["hope"]
}

#### Your response:
Willpower isn’t unlimited. It gets pulled in lots of directions throughout the day. But that doesn’t mean you’re stuck. There are always other ways to approach this, and it’s absolutely possible to find something that makes eating well feel more natural and doable for you.
"""       
        prompt = f"""
# Task: Generate a supportive, user-facing response based on structured system output.
# Only return the message you would show to the user.
# Match the tone and style of the examples.

# Input:
{context}

---

# EXAMPLES
    
## Example 1:
{eg1}

--

## Example 2:
{eg2}

--

##Example 3:
{eg3}

--

## Example 4:
{eg4}

--

## Example 5:
{eg5}

---

## NEW INPUT

#### Input:
{context}

#### Your response:

"""


        return generate(prompt , self_affirming_system_prompt)


    def generate_ack(self, context: dict, user_input: dict) -> str:
        eg0 = """
#### Input:
{
    "response_type": "ack", 
    "value": "ack_identity",
    "reason": "user shared their personal values of friendship and support", 
    "soft_self_management_indicators": [],
    "personal_values": ["friendship", "support"]
}

#### Your Respone:
Thank you for opening up about what’s important to you: friendship and support.

"""
        eg1 = """
#### Input:
{
    "response_type": "ack", 
    "value": "ack_food_items",
    "reason": "User logged food items (Oreos); acknowledging the input.", 
    "soft_self_management_indicators": ["low self-control", "frustration"],
    "personal_values": []
}

#### Your Response:
Taking the time to share this is a way of showing up. It can make space for what comes next.

"""
        
        eg2 = """
#### Input:
{
    "response_type": "ack", 
    "value": "ack_express_stress", 
    "reason": "user expressed stress related to university",
    "soft_self_management_indicators": ["distress"],
    "personal_values": ["trust"]
}

#### Your Response:
It makes sense that this feels like a lot. If you paused for a moment, is there something you care about that’s been quiet lately? Something that might feel grounding to revisit?

"""
        
        eg3 = """
#### Input:
{
    "response_type": "ack", 
    "value": "ack_physical_activity_barriers", 
    "reason": "user expressed time constraints as a barrier to physical activity", 
    "soft_self_management_indicators": ["frustration"],
    "personal_values": ["discipline"]
}

#### Your Response:
Having limited time doesn’t mean you’re falling short. Reaching out here is already a sign that you’re staying connected to what matters to you.

"""
        
        eg4 = """
#### Input
{
    "response_type": "ack", 
    "value": "ack_contextual_barrier", 
    "reason": "user expressed difficulty taking medicine on time, which is a contextual barrier", 
    "soft_self_management_indicators": ["low self-control", "frustration"],
    "personal_values": ["sleep"]
}

#### Your Response:
You’re not alone in finding that hard to keep up with. Acknowledging it openly is a strong start.

"""
        
        eg5 = """
#### Input
{
    "response_type": "ack", 
    "value": "ack_personal_values", 
    "reason": "user mentioned valuing friends", 
    "soft_self_management_indicators": []
}

#### Your Response:
Knowing that friends are important to you helps me understand your perspective better. Thanks for sharing that.

"""
        
        prompt = f"""
# Task: Acknowledge user's input.
# Do not name or explain the user's emotions.
# Avoid praise, emotional reassurance, or advice.
# Only return the message you would show to the user.
# Match the tone and style of the examples.

# Input: 
  {context} 

---

# EXAMPLES
    
## Example 1:
{eg0}

--

## Example 2:
{eg1}

--

## Example 3:
{eg2}

--

##Example 4:
{eg3}

--

## Example 5:
{eg4}

--

## Example 6:
{eg5}

---

## NEW INPUT

#### Input:
{context}

#### Your response:

""" 

        return generate(prompt , self_affirming_system_prompt)
    
    def generate_question(self, context: dict, user_input: dict) -> str:
        eg1 = """
#### Input:
{
    "response_type": "question",
    "value": "ask_carbs_estimate", 
    "reason": "user logged eating chocolate in too large a portion", 
    "soft_self_management_indicators": ["low self-control", "guilt"],
    "personal_values": ["safety"]
}

#### Your Response:
Could you estimate the carbs in that portion? It could help me support you in a way that’s in tune with where you’re at.

"""
        
        eg2 = """
#### Input:
{
    "response_type": "question", 
    "value": "ask_measurment_time", 
    "reason": "glucose level provided but measurement time is missing", 
    "soft_self_management_indicators": [],
    "personal_values": ["responsibility"]
}

#### Your Response:
Could you share the time of the measurement? It helps support the consistency you’re shaping in your routine.
"""

        eg3 = """
#### Input:
{
    "response_type": "question", 
    "value": "ask_reason_for_mood", 
    "reason': "user expressed high stress but mood is unknown", 
    "soft_self_management_indicators": ["distress"],
    "personal_values": ["self-awareness"]
}

#### Your Response:
Do you have a sense of what might be behind this feeling? It can sometimes help to take a step back and reflect on the bigger picture. That kind of space might bring you a little closer to understanding what’s going on inside.
""" 
        
        
        eg4 = """

#### Input:
{
    "response_type": "question",
    "value": "ask_goal_reason",
    "reason": "user set a physical activity goal but did not specify the reason",
    "soft_self_management_indicators": [],
    "personal_values": ["hope"]
    
}

#### Your Response:
That’s a great goal! What made you choose it? Reflecting on what’s motivating you can help you feel more connected to the goal and recognize the value it holds for you.
"""
    
        prompt = f"""
# Task: Ask a question.
# Only return the message you would show to the user.
# Match the tone and style of the examples.

# Input:
{context}

---

# EXAMPLES
    
## Example 1:
{eg1}

--

## Example 2:
{eg2}

--

##Example 3:
{eg3}

--

## Example 4:
{eg4}

---

## NEW INPUT

#### Input:
{context}

#### Your response:

"""
        
        return generate(prompt , self_affirming_system_prompt)

