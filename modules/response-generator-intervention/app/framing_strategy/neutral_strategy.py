from app.framing_strategy.base import FramingStrategy
from app.util import ResponseType
from app.util.ai_api_connector import generate
from flask import current_app

neutral_system_prompt = """
### Role: 

You are part of a natural language generation (NLG) system.
Your role is to generate user-facing responses that are **fact-based and neutral**, using structured data generated by an earlier decision-making component. This means:
- Converting input into concise, natural-sounding language.
- Using clear, direct non-judgmental.
- Avoiding emotional tone, interpretation, or inference.
- Stating only what is explicitly provided: do not assume, elaborate, or evaluate.
- Addressing the user directly as "you" or by name, "Oscar".

---

## Input 

You will receive an object with the following fields:

- "response_type": one of "ack", "answer", or "question".
- "value": the system’s intended response, expressed as a tag (e.g., "ack_contextual_barrier", "ask_measurment_time") or as a short answer.
- "reason": contextual information or justification behind the "value" (e.g., "glucose level provided but measurement time is missing").

---

### Response Generation Guidelines

Generate fluent neutral language from the structured input.  

Response rules:
- Begin with the `value` as the central focus.
- Use the `reason` to frame or contextualize the response.

The `response_type` defines your approach:
- "ack" - briefly acknowledge or reflect back the user's input.
- "answer" - respond to user's question with factual, relevant information.
- "question" - ask a concise, direct follow-up question to gather missing or related info

---

### Output

Your output should:
1. Generate only the user-facing message as a fluent, natural-language sentence or two.
2. Never include metadata or object structure. 
3. Always match the tone, phrasing style and message framing of the examples, even if the content or context differs. The examples are provided to establish a consistent voice and structure.

"""

class NeutralStrategy(FramingStrategy):

    # Delegates the generation of the prompt based on the expected response type
    def generate_response(self, context, user_input, response_type) -> str:
        context.pop("personal_values", None)
        context.pop("soft_self_management_indicators", None)

        if response_type == ResponseType.G:
            return self.generate_greeting(context, user_input)
        
        elif response_type == ResponseType.Q:
            return self.generate_question(context, user_input)
        
        elif response_type == ResponseType.ANS:
            return self.generate_answer(context, user_input)
        
        elif response_type == ResponseType.ACK:
            return self.generate_ack(context, user_input)
        
        elif response_type == ResponseType.C:
            return self.generate_closing(context, user_input)

        return "Sorry, something went wrong while processing your message. Please try again."
    
    # Generates a greeting for the user
    def generate_greeting(self, context: dict, user_input: dict) -> str:
        return "Hello Oscar! Is there anything you’d like to check or update today?"
    
    # Generates a goodbye message for the user
    def generate_closing(self, context: dict, user_input: dict) -> str:
        return "Goodbye, Oscar!"

    
    def generate_answer(self, context: dict, user_input: dict) -> str:
        prompt = f"""
                ### Task: Provide an Answer

                Generate a brief, factual response based on the input.  
                Your response should clearly communicate the `value`, while using the `field_type` and `reason` to provide minimal but relevant framing.

                Do not include advice, questions, or interpretation beyond what is explicitly stated.

                ### Input:
                {context}
                """
        eg1 = """
#### Input:
{
    "response_type": "answer", 
    "value": "Try a short walk after meals.", 
    "reason": "user asked for exercise advice and reported being low on time"
}
    
#### Your Response:
A short walk after eating may fit into a limited schedule.

"""
        
        eg2 = """
#### Input:
{
"response_type": "answer", 
"value": "Start with small, manageable changes.", 
"reason": "user asked for advice on diabetes self-management and has difficulty forming habits"
}

#### Your Response:
One approach is to start with small, manageable changes.

"""
        
        eg3 = """
#### Input:

{
    "response_type": "answer", 
    "value": "Insert a test strip into your glucose meter.", 
    "reason': 'user asked how to measure glucose"
}

#### Your Response:
Insert a test strip into your glucose meter.

"""

        eg4 = """

#### Input:
{
    "response_type": "answer", 
    "value": "Consistent habits are key.", 
    "reason": "User expressed frustration and asked a question about diabetes management"
}

#### Your Response:
You can consider focusing on consistency in your habits.

"""
        
        eg5 = """

#### Input:
{
    "response_type": "answer",
    "value": "Willpower is a limited resource.", 
    "reason": "user expressed frustration about lack of willpower to avoid unhealthy foods and asked a 'why' question",
}

#### Your response:
Limited willpower is one factor that can make it harder to avoid certain choices.

"""
        
        prompt = f"""
# TASK: Generate a user-facing response based on structured system output.
- Only return the message you would show to the user.
- Match the tone and style of the examples.

---

# EXAMPLES
    
## Example 1:
{eg1}

--

## Example 2:
{eg2}

--

##Example 3:
{eg3}

--

## Example 4:
{eg4}

--

## Example 5:
{eg5}

---

## NEW INPUT

#### Input:
{context}

#### Your response:

"""

        return generate(prompt , neutral_system_prompt)

    def generate_ack(self, context: dict, user_input: dict) -> str:
        eg1= """
#### Input:
{
    "response_type": "ack", 
    "value": "ack_stress", 
    "reason": "user expressed high stress"
}

#### Your Response:
You mentioned experiencing stress.

"""
        
        eg2 = """
#### Input:
{
    "response_type": "ack", 
    "value": "ack_physical_activity_barriers", 
    "reason": "user expressed time constraints as a barrier to physical activity"
}

#### Your Response:
Logged: limited time impacting physical activity. Do you want suggestions on how to proceed?

"""
        
        eg3 = """
#### Input
{
    "response_type": "ack", 
    "value": "ack_contextual_barrier", 
    "reason": "user expressed difficulty taking medicine on time, which is a contextual barrier"
}

#### Your Response:
Recorded timing difficulties related to taking medication.

"""
        
        eg4 = """
#### Input
{
    "response_type": "ack", 
    "value": "ack_personal_values", 
    "reason": "user mentioned valuing friends"
}

#### Your Response:
Personal value identified: friendship.

"""
        
        eg5 = """
#### Input:
{
    "response_type": "ack", 
    "value": "ack_food_items",
    "reason": "user logged food items (chocolates)"
}

#### Your Response:
Chocolates have been added to today’s food record.

"""
        
        prompt = f"""
# TASK: Acknowledge user's input.
- Generate a brief, factual acknowledgment based on the input.  
- Only return the message you would show to the user.
- Match the tone and style of the examples.       

---

# EXAMPLES
    
## Example 1:
{eg1}

--

## Example 2:
{eg2}

--

##Example 3:
{eg3}

--

## Example 4:
{eg4}

--

## Example 5:
{eg5}

---

## NEW INPUT

#### Input:
{context}

#### Your response:

"""
    
        return generate(prompt , neutral_system_prompt)
    
    def generate_question(self, context: dict, user_input: dict) -> str:
        eg1 = """
#### Input:
{
    "response_type": "question",
    "value": "ask_carbs_estimate", 
    "reason": "user logged eating chocolate in too large a portion"
}

#### Your Response:
Can you roughly estimate the carbohydrate content?

"""
        
        eg2 = """
#### Input:
{
    "response_type": "question", 
    "value": "ask_measurment_time", 
    "reason": "glucose level provided but measurement time is missing"
}

#### Your Response:
When was this glucose reading taken?

"""
        
        eg3 = """
#### Input:
{
    "response_type": "question", 
    "value": "ask_reason_for_mood", 
    "reason': "user expressed high stress but mood is unknown"
}

#### Your Response:
What has been influencing your mood lately?

""" 
        
        
        eg4 = """
#### Input:
{
    "response_type": "question",
    "value": "ask_goal_reason",
    "reason": "user set a physical activity goal but did not specify the reason"
}

#### Your Response:
What’s your reason for choosing this physical activity goal?

"""
    
        prompt = f"""
# TASK: Ask a question.
- Only return the message you would show to the user.
- Match the tone and style of the examples.

---

# EXAMPLES
    
## Example 1:
{eg1}

--

## Example 2:
{eg2}

--

##Example 3:
{eg3}

--

## Example 4:
{eg4}

---

## NEW INPUT

#### Input:
{context}

#### Your response:

"""
        
        return generate(prompt , neutral_system_prompt)