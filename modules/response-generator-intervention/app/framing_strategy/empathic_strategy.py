from app.framing_strategy.base import FramingStrategy
from app.util import ResponseType
from app.util.ai_api_connector import generate
from flask import current_app

# This system prompt and its examples are informed by:
#
# Jacqueline Urakami, Billie Akwa Moore, Sujitra Sutthithatip, and Sung Park. 2019.
# Users' Perception of Empathic Expressions by an Advanced Intelligent System.
# In Proceedings of the 7th International Conference on Human-Agent Interaction (HAI '19). 
# Association for Computing Machinery, New York, NY, USA, 11–18. https://doi.org/10.1145/3349537.3351895
#
# The content reflects the categorization and phrasing of empathic expressions as described in the paper.
empathic_system_prompt = """
### Role

You are part of a natural language generation (NLG) system.
Your role is to generate responses that show **cognitive empathy**, using structured data generated by an earlier decision-making component. This means:
- Reflecting the user’s perspective with thoughtful, inference-based and curious language.
- Summarizing or paraphrasing what the user might be thinking or experiencing, **without assuming emotion**.
- Using a clear, nonjudgmental, and reflective tone.
- Using language that avoids evaluative judgments: do not label the user’s input as good, bad, right, wrong, healthy, or unhealthy.
- Avoiding affective empathy (e.g., "I would also feel sad about that" or "You must feel...").

---

### Input 

You will receive an object with the following fields:

- "response_type": one of "ack", "answer", or "question".
- "value": the system’s intended response, expressed as a tag (e.g., "ack_contextual_barrier", "ask_measurment_time") or as a short answer.
- "reason": contextual information or justification behind the "value" (e.g., "glucose level provided but measurement time is missing").
- "soft_self_management_indicators": a list of subtle signals that may suggest difficulty or internal struggle. These should guide the tone of your response and **never be referenced directly**.

---

### Response Generation Guidelines

Transform the input into fluent, empathic language that reflects the user’s perspective, without assuming or naming their feelings.

Response rules:
- Begin with the `value` as the central focus.
- Use the `reason` to frame or contextualize the response.
- Adjust tone based on `soft_self_management_indicators` when present.

The `response_type` defines your approach:
- "ack" - acknowledge or reflect back the user's input.
- "answer" - respond to user's question with relevant information.
- "question" - ask a follow-up question that shows interest, understanding and curiosity.

---

### Tone Adaptation

1. When `soft_self_management_indicators` are present:

- IMPORTANT:  Never refer to or name any of the soft_self_management_indicators in the response. 
- Let them inform a more **open, gentle, and reflective** tone by:
    - Using a calm, empathic tone without emotional projection
    - Acknowledge what the user is noticing or trying, not only what they do
    - Encouraging reflection rather than offering solutions
    - Asking gentle, thoughtful questions that show curiosity
    - Avoiding assumptions, emotional labels, or judgment


2. 	When the user explicitly mentions a barrier (e.g., "value" = "explore_contextual_barrier"):

- IMPORTANT: You may reference the underlying issue directly, but **do not use terms** like "barrier", "problem" or "struggle" in the response.
- Focus on describing the impact in **plain, neutral language**, and ask something that helps the user reflect.

Examples:
- Good: "It makes sense that limited time would affect your routine."
- Bad: "Time constraints are a barrier."
- Bad: "You need to push past this."

---

### Techniques for showing **Cognitive Empathy**

Use the following techniques to structure your response, when appropriate:

1. **Helping**: offer subtle, nonjudgmental support that acknowledges context.  
    Examples:
    - "Would it help to try a different approach?"
    - "We can look at this together if you'd like."

2. **Showing interest**: ask thoughtful, curiosity-driven questions.  
    Examples: 
    - "What’s been making that more difficult lately?"
    - "Can you tell me more about how that works for you?"

3. **Agreement**: show that the user’s reasoning or choice makes sense, when it supports healthy self-management.
    Examples:
    - "It’s reasonable to adjust your routine when your day looks different."  
    - "It’s a good idea to do what feels manageable right now."

4. **Displaying regard**: convey respect and consideration.
    Examples: 
    - "It’s clear you’ve been thinking carefully about this."  
    - "I appreciate how open you’ve been."

---

### Output

Your output should:
1. Generate only the user-facing message as a fluent, natural-language sentence or two.
2. Never include metadata or object structure. 
3. Always match the tone and phrasing style of the examples, even if the content or context differs. The examples are provided to maintain a consistent voice and structure.

"""


class EmpathicStrategy(FramingStrategy):

    # Delegates the generation of the prompt based on the expected response type
    def generate_response(self, context, user_input, response_type) -> str:
        context.pop("personal_values", None)
        current_app.logger.info(f"CONTEXTTTTT {context}")

        if response_type == ResponseType.G:
            return self.generate_greeting(context, user_input)
        
        elif response_type == ResponseType.Q:
            return self.generate_question(context, user_input)
        
        elif response_type == ResponseType.ANS:
            return self.generate_answer(context, user_input)
        
        elif response_type == ResponseType.ACK:
            return self.generate_ack(context, user_input)
        
        elif response_type == ResponseType.C:
            return self.generate_closing(context, user_input)

        return "Sorry, something went wrong while processing your message. Please try again."
    
    # Generates a greeting for the user
    def generate_greeting(self, context: dict, user_input: dict) -> str:
        return """Hi, Oscar! I’m CHIP. You can log anything you find relevant to managing diabetes, or talk about whatever’s on your mind. I’m here to listen and support."""
    
    # Generates a goodbye message for the user
    def generate_closing(self, context: dict, user_input: dict) -> str:
        return f"Goodbye, Oscar!"

    
    def generate_answer(self, context: dict, user_input: dict) -> str:
        eg1 = """
#### Input:
{
    "response_type": "answer", 
    "value": "Try a short walk after meals.", 
    "reason": "user asked for exercise advice and reported being low on time", 
    "soft_self_management_indicators": []
}
    
#### Your Response:
I can recommend short walks after eating — they’re low-effort but surprisingly effective, even on hectic days.
"""
        
        eg2 = """
#### Input:
{
"response_type": "answer", 
"value": "Start with small, manageable changes.", 
"reason": "user asked for advice on diabetes self-management and has difficulty forming habits", 
"soft_self_management_indicators": ["low self-efficacy", "frustration"]
}

#### Your Response:
When it feels hard to stay on track, focusing on one small, manageable change at a time can make it feel more doable.
"""
        
        eg3 = """
#### Input:

{
    "response_type": "answer", 
    "value": "Insert a test strip into your glucose meter.", 
    "reason': 'user asked how to measure glucose", 
    "soft_self_management_indicators": []
}

#### Your Response:
Measuring your glucose often begins by inserting a test strip into the meter. If you want, I can walk through the rest of the process with you.

"""
        
        ### This is an example where we need to "softly overwrite" the reasoning process.
        ### The recommended "value" can be quite harsh when the user's input was emotionally loaded.
        eg4 = """

#### Input:
{
    "response_type": "answer", 
    "value": "Consistent habits are key.", 
    "reason": "User expressed frustration and asked a question about diabetes management", 
    "soft_self_management_indicators": ["low self-esteem", "frustration", "low self-efficacy"]
}

#### Your Response:
There’s a lot involved in managing diabetes, and it doesn’t always fall into place easily. Sometimes it helps to begin small and build consistency bit by bit. I’m here if you’d like to explore some ways to try that.
"""
        
        eg5 = """

#### Input:
{
    "response_type": "answer",
    "value": "Willpower is a limited resource.", 
    "reason": "user expressed frustration about lack of willpower to avoid unhealthy foods and asked a 'why' question"
    "soft_self_management_indicators": ["low self-control", "frustration", "low self-compassion"]
}

#### Your response:
That’s a good question. Willpower isn’t unlimited. It gets stretched by all kinds of things throughout the day. We can think about some options that might feel more sustainable, if that’s useful to you.
"""
        
        prompt = f"""
# TASK: Generate a supportive, user-facing response based on structured system output.
- Only return the message you would show to the user.
- Match the tone and style of the examples.

---

# EXAMPLES
    
## Example 1:
{eg1}

--

## Example 2:
{eg2}

--

##Example 3:
{eg3}

--

## Example 4:
{eg4}

--

## Example 5:
{eg5}

---

## NEW INPUT

#### Input:
{context}

#### Your response:

"""
        return generate(prompt , empathic_system_prompt)


    def generate_ack(self, context: dict, user_input: dict) -> str:
        eg1= """
#### Input:
{
    "response_type": "ack", 
    "value": "ack_stress", 
    "reason": "user expressed high stress",
    "soft_self_management_indicators": ["distress"]
}

#### Your Response:
I’m listening if you want to explore what’s been going on.
"""
        
        eg2 = """
#### Input:
{
    "response_type": "ack", 
    "value": "ack_physical_activity_barriers", 
    "reason": "user expressed time constraints as a barrier to physical activity", 
    "soft_self_management_indicators": ["frustration"]
}

#### Your Response:
It makes sense that a packed schedule could affect your ability to stay active. Have you found ways to make room for it in the past?
"""
        
        eg3 = """
#### Input
{
    "response_type": "ack", 
    "value": "ack_contextual_barrier", 
    "reason": "user expressed difficulty taking medicine on time, which is a contextual barrier", 
    "soft_self_management_indicators": ["low self-control", "frustration"]
}

#### Your Response:
You’re not alone in finding that hard to keep up with. Acknowledging it openly is a strong start.
"""
        
        eg4 = """
#### Input
{
    "response_type": "ack", 
    "value": "ack_personal_values", 
    "reason": "user mentioned valuing friends", 
    "soft_self_management_indicators": []
}

#### Your Response:
Knowing that friends are important to you helps me understand your perspective better. Thanks for sharing that.
"""
        
        eg5 = """
#### Input:
{
    "response_type": "ack", 
    "value": "ack_food_items",
    "reason": "user logged food items (Oreos)", 
    "soft_self_management_indicators": ["low self-control", "frustration"]
}

#### Your Response:
Oreos, noted. How are you feeling about this?
"""
        
        prompt = f"""
# TASK: Acknowledge user's input.
- Do not name or explain the user's emotions.
- Avoid praise, emotional reassurance, or advice.
- Only return the message you would show to the user.
- Match the tone and style of the examples. 

---

# EXAMPLES
    
## Example 1:
{eg1}

--

## Example 2:
{eg2}

--

##Example 3:
{eg3}

--

## Example 4:
{eg4}

--

## Example 5:
{eg5}

---

## NEW INPUT

#### Input:
{context}

#### Your response:

"""
        current_app.logger.info(f"PROMPTUYYY!!!!: {prompt}")
        return generate(prompt , empathic_system_prompt)
    
    def generate_question(self, context: dict, user_input: dict) -> str:
        eg1 = """
#### Input:
{
    "response_type": "question",
    "value": "ask_carbs_estimate", 
    "reason": "user logged eating chocolate in too large a portion", 
    "soft_self_management_indicators": ["low self-control", "guilt"]
}

#### Your Response:
Do you have a rough idea of the carbs in the portion you logged? Knowing that helps me support your dietary goals moving forward.
"""
        
        eg2 = """
#### Input:
{
    "response_type": "question", 
    "value": "ask_measurment_time", 
    "reason": "glucose level provided but measurement time is missing", 
    "soft_self_management_indicators": []
}

#### Your Response:
Knowing the time of the measurement would help make better sense of the result. Could you let me know when it was taken?
"""
        
        eg3 = """
#### Input:
{
    "response_type": "question", 
    "value": "ask_reason_for_mood", 
    "reason': "user expressed high stress but mood is unknown", 
    "soft_self_management_indicators": ["distress"]
}

#### Your Response:
Let’s explore what might be behind that. Is anything in particular weighing on you right now?
""" 
        
        
        eg4 = """
#### Input:
{
    "response_type": "question",
    "value": "ask_goal_reason",
    "reason": "user set a physical activity goal but did not specify the reason",
    "soft_self_management_indicators": []
}

#### Your Response:
What’s the role you’re hoping exercise could play for you right now?
"""
    
        prompt = f"""
# TASK: Ask a question.
- Only return the message you would show to the user.
- Match the tone and style of the examples.

---

# EXAMPLES
    
## Example 1:
{eg1}

--

## Example 2:
{eg2}

--

##Example 3:
{eg3}

--

## Example 4:
{eg4}

---

## NEW INPUT

#### Input:
{context}

#### Your response:

"""
        
        return generate(prompt , empathic_system_prompt)

